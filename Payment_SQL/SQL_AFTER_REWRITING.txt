WITH latest_case_tag AS ( SELECT t3.* FROM t2 t3 JOIN ( SELECT c2, MAX(c6) AS c6 FROM t2 WHERE c6 > v10 GROUP BY c2 ) t2 ON t3.c2 = t2.c2 AND t3.c6 = t2.c6 WHERE t3.c6 > v10 ) SELECT * FROM ( SELECT t1.c1, t1.c2 AS c2_1, t1.c3, t1.c4, MAX(t1.c5) AS c5 FROM t1 t1 WHERE t1.c1 IN (v1) AND t1.c1 IN (v2, v3) AND t1.c3 IN (v4, v5, v6) AND t1.c4 BETWEEN v7 AND v8 AND t1.c6 = v9 AND t1.c5 = 0 GROUP BY t1.c1, t1.c2, t1.c3, t1.c4 ) a0 LEFT JOIN latest_case_tag a1 ON a0.c2_1 = a1.c2 WHERE ((a0.c3 = v4 AND a0.c1 = v2) AND ((a1.c7 = v11) OR (a1.c8 = v12 AND a1.c9 IN (v13, v14, v15, v16)) OR (a1.c8 = v12 AND a1.c10 IN (v17)) OR (a1.c8 = v12 AND a1.c11 LIKE v18) OR (a1.c8 = v12 AND a1.c12 IN (v19, v20)))) OR ((a0.c3 = v5 AND a0.c1 = v2) AND ((a1.c13 = v21) OR (a1.c8 = v12 AND a1.c14 IN (v22, v23)) OR (a1.c8 = v12 AND a1.c9 IN (v13)) OR (a1.c8 = v12 AND a1.c10 IN (v24, v17)) OR (a1.c8 = v12 AND a1.c11 LIKE v25) OR (a1.c8 = v12 AND a1.c15 IN (v25, v26)) OR (a1.c8 = v12 AND a1.c12 IN (v19, v20)))) OR (a0.c3 = v6) OR (a0.c3 = v4 AND a0.c1 = v3) OR (a0.c3 = v5 AND a0.c1 = v3)
WITH base_data AS ( SELECT CASE WHEN IFNULL(c4, v1) = v2 THEN v2 ELSE v3 END AS c2, CASE WHEN ( (CONCAT(NVL(c4, ''), NVL(c5, '')) RLIKE v4 AND CONCAT(NVL(c4, ''), NVL(c5, '')) NOT RLIKE v5) OR (NVL(c6, '') RLIKE v6 AND NVL(c6, '') NOT RLIKE v7) OR (CONCAT(NVL(c7, ''), NVL(c8, ''), NVL(c9, '')) RLIKE v4) OR (CONCAT(NVL(c10, ''), NVL(c11, ''), NVL(c12, ''), NVL(c13, '')) RLIKE v8 AND CONCAT(NVL(c10, ''), NVL(c11, ''), NVL(c12, ''), NVL(c13, '')) NOT RLIKE v9) ) AND NVL(c14, '') NOT RLIKE v10 THEN v2 ELSE v3 END AS c3 FROM t1 whole_tb WHERE whole_tb.c15 = v11 AND c16 IS NOT NULL ) SELECT COUNT(*) AS c1, c2, c3 FROM base_data GROUP BY c2, c3;
WITH t2 AS ( SELECT c17, c18, c19, c20, c21, c22, c23, c24 FROM t3 WHERE c25 >= v1 AND c19 = v2 AND c26 IN (v3, v4) AND c21 = v5 AND c23 > v6 UNION ALL SELECT c17, c18, c19, c20, c21, c22, c23, c24 FROM t4 WHERE c19 = v2 AND c25 = v7 AND c26 IN (v3, v4) AND c21 = v5 AND c23 > v6 ), t5 AS ( SELECT * FROM t5 WHERE c25 = v8 AND c19 = v2 AND c28 <= v9 ), t1 AS ( SELECT t2.c20 AS c1, t2.c19 AS c2, t2.c18 AS c3, t2.c17 AS c4, t2.c21 AS c5, t2.c22 AS c6, t2.c23 AS c7, t2.c24 AS c8 FROM t2 INNER JOIN t5 ON t2.c19 = t5.c19 ), t6 AS ( SELECT c17, c18, c19, c23, c29 FROM t3 WHERE c25 >= v1 AND c26 IN (v10, v11) AND c21 = v5 ), t7 AS ( SELECT t6.c18 AS c3, t6.c17 AS c4, c29 FROM t6 INNER JOIN t5 ON t6.c19 = t5.c19 ) SELECT t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8 FROM t1 LEFT JOIN t7 ON t1.c4 = t7.c4 WHERE t7.c4 IS NULL OR (t1.c7 != t7.c29)
WITH subquery0 AS ( SELECT column0 FROM table0 LIMIT 1 ) SELECT column1, column2, column3, column4, column5, column6, column7, column8, column9, column10, CASE WHEN column11 IS NULL THEN NULL WHEN column11 = '' THEN '' ELSE cast( sm4_GCMDecryptNoPadding( hive_unbase64(substr(column11, 68)), `binary`(k.column0), hive_unbase64(substr(column11, 26, 16)), 12, hive_unbase64(substr(column11, 1, 24)), hive_unbase64(substr(column11, 43, 24)) ) AS STRING ) END AS column11, CASE WHEN column12 IS NULL THEN NULL WHEN column12 = '' THEN '' ELSE cast( sm4_GCMDecryptNoPadding( hive_unbase64(substr(column12, 68)), `binary`(k.column0), hive_unbase64(substr(column12, 26, 16)), 12, hive_unbase64(substr(column12, 1, 24)), hive_unbase64(substr(column12, 43, 24)) ) AS STRING ) END AS column12, CASE WHEN column13 IS NULL THEN NULL WHEN column13 = '' THEN '' ELSE cast( sm4_GCMDecryptNoPadding( hive_unbase64(substr(column13, 68)), `binary`(k.column0), hive_unbase64(substr(column13, 26, 16)), 12, hive_unbase64(substr(column13, 1, 24)), hive_unbase64(substr(column13, 43, 24)) ) AS STRING ) END AS column13, CASE WHEN column14 IS NULL THEN NULL WHEN column14 = '' THEN '' ELSE cast( sm4_GCMDecryptNoPadding( hive_unbase64(substr(column14, 68)), `binary`(k.column0), hive_unbase64(substr(column14, 26, 16)), 12, hive_unbase64(substr(column14, 1, 24)), hive_unbase64(substr(column14, 43, 24)) ) AS STRING ) END AS column14, column15, column16, column17, column18, CASE WHEN column19 IS NULL THEN NULL WHEN column19 = '' THEN '' ELSE cast( sm4_GCMDecryptNoPadding( hive_unbase64(substr(column19, 68)), `binary`(k.column0), hive_unbase64(substr(column19, 26, 16)), 12, hive_unbase64(substr(column19, 1, 24)), hive_unbase64(substr(column19, 43, 24)) ) AS STRING ) END AS column19, column20, column21, column22, column23, column24, column25, unix_timestamp(column26, 'yyyy-MM-dd HH:mm:ss') AS column26, unix_timestamp(column27, 'yyyy-MM-dd HH:mm:ss') AS column27, column28, column29, column30, column31, column32, column33, column34, unix_timestamp(column35, 'yyyy-MM-dd HH:mm:ss') AS column35 FROM table1 PARTITION (p_20250101) p JOIN subquery0 k ON (1 = 1) WHERE column1 = 100010000
WITH temp_table1 AS ( SELECT c12, c13, c14, c1, c15, c16, c11, c17, c3, c18, c19, c10, c20, c21, c22, c7, c8, c23 FROM ( SELECT c12, c13, c14, c1, c15, c16, c11, c17, c3, c18, c19, c10, c20, c21, c22, c7, c8, c23, ROW_NUMBER() OVER (PARTITION BY c16, c20 ORDER BY c12 DESC, c22 DESC) AS c30 FROM ( SELECT c12, c13, c14, c1, c15, c16, c11, c17, c3, c18, c19, c10, c20, c21, c22, c7, c8, c23 FROM t3 WHERE c9 = v1 UNION ALL SELECT CAST(c12 AS BIGINT) AS c12, c13, c14, c1, CAST(c15 AS BIGINT) AS c15, CAST(c16 AS BIGINT) AS c16, CAST(c11 AS BIGINT) AS c11, CAST(c17 AS BIGINT) AS c17, CAST(c3 AS BIGINT) AS c3, CAST(c18 AS BIGINT) AS c18, CASE WHEN array_contains(split(c31, ';'), v4) THEN unbase64(c19) ELSE c19 END AS c19, CAST(c10 AS BIGINT) AS c10, c20, CAST(c21 AS BIGINT) AS c21, CAST(c22 AS BIGINT) AS c22, CASE WHEN array_contains(split(c31, ';'), v5) THEN unbase64(c7) ELSE c7 END AS c7, CASE WHEN array_contains(split(c31, ';'), v6) THEN unbase64(c8) ELSE c8 END AS c8, CASE WHEN array_contains(split(c31, ';'), v7) THEN unbase64(c23) ELSE c23 END AS c23 FROM t4 WHERE c32 >= v8 AND c32 <= v9 AND c1 NOT LIKE v10 ) ) WHERE c30 = v11 ) SELECT COUNT(*) FROM ( SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM t1 WHERE c9 = v1 AND c10 = v2 AND c11 = v3 ) temp_table2 LEFT OUTER JOIN temp_table1 ON ( temp_table2.c2 = temp_table1.c16 AND temp_table2.c6 = temp_table1.c20 AND temp_table2.c1 = temp_table1.c1 AND temp_table2.c7 = temp_table1.c7 AND temp_table2.c8 = temp_table1.c8 ) WHERE temp_table1.c16 IS NULL;
WITH temp_table1 AS ( SELECT 'v1' AS c1, COUNT(*) AS c3, COUNT(DISTINCT c5) AS c4 FROM t1 WHERE c6 >= 1213 AND c6 <= 1215 AND c7 = 1 AND c8 = 0 ), temp_table3 AS ( SELECT c9 AS c1, COUNT(*) AS c3, COUNT(DISTINCT c5) AS c4 FROM t2 WHERE c10 >= 1213 AND c10 <= 1215 AND c9 IN ('v1', 'v3', 'v5', 'v7', 'v9', 'v11', 'v13', 'v15', 'v17', 'v19') AND get_json_object(c11, 'str0') = 1 GROUP BY c9 ), temp_table2 AS ( SELECT c1, c3, c4 FROM temp_table1 UNION ALL SELECT c1, c3, c4 FROM temp_table3 ) SELECT CASE WHEN c1 = 'v1' THEN 'v2' WHEN c1 = 'v3' THEN 'v4' WHEN c1 = 'v5' THEN 'v6' WHEN c1 = 'v7' THEN 'v8' WHEN c1 = 'v9' THEN 'v10' WHEN c1 = 'v11' THEN 'v12' WHEN c1 = 'v13' THEN 'v14' WHEN c1 = 'v15' THEN 'v16' WHEN c1 = 'v17' THEN 'v18' WHEN c1 = 'v19' THEN 'v20' END AS c1, c3, c4 FROM temp_table2;
WITH base_data AS ( SELECT t3.c1 c1, t3.c2 c2, max(IF(t3.c3 = '', NULL, t3.c3)) c3, regexp_extract(t3.c2, '(^[a-z_]+_|^wx)([a-z0-9]+)', 2) c4, max(IF(t3.c5 = '', NULL, t3.c5)) c5, max(IF(t3.c6 = '', NULL, t3.c6)) c6, max(IF(t3.c7 = '', NULL, t3.c7)) c7, max(IF(t3.c8 = '', NULL, t3.c8)) c8, max(IF(t3.c9 = '' OR t3.c9 = '0', NULL, t3.c9)) c9, max(IF(t3.c10 = '' OR t3.c10 = '0', NULL, t3.c10)) c10, max(IF(t3.c7 IS NOT NULL OR t3.c7 != '', t3.c7, t3.c8)) c11, t3.c12 c12 FROM t3 p WHERE t3.c2 IS NOT NULL AND t3.c2 != '' AND t3.c2 != '0' AND t3.c1 > 0 AND t3.c12 IS NOT NULL AND t3.c12 != '' AND t3.c12 != '0' GROUP BY t3.c2, t3.c1, t3.c12 ), aggregated_data AS ( SELECT c1, MAX(c2) c2, MAX(c3) c3, c4, MAX(c5) c5, MAX(c6) c6, MAX(c7) c7, MAX(c8) c8, MAX(c9) c9, MAX(c10) c10, MAX(c11) c11, c12 FROM base_data GROUP BY c4, c1, c12 ) SELECT c1, c2, c3, IF(c4 IS NULL OR c4 = '', c2, c4) c4, c5, c6, c7, c8, NVL(c9, c3) c9, NVL(c10, c12) c10, c12, IF(c10 IS NULL OR c10 = c12, 0, 1) c12 FROM aggregated_data WHERE c4 = v1;
WITH t1 AS ( SELECT c1, c4 FROM t6 WHERE c14 IN (v1, v2) AND c1 >= v3 AND c1 <= v4 ), t2 AS ( SELECT c1, c15, c13, c6, c8, c10 FROM ( SELECT c15, c13 FROM t8 ) a1 JOIN ( SELECT c1, c16, c6 - c17 AS c6, c8 - c18 AS c8, c10 - c19 AS c10 FROM t9 WHERE c1 >= v3 AND c1 <= v4 ) a2 ON a1.c13 = a2.c16 ), t4 AS ( SELECT c4, c2 FROM t11 ), t5 AS ( SELECT a1.c15, a1.c20, a2.c21, CASE WHEN c21 = v5 THEN v6 WHEN c21 = v7 THEN v8 WHEN c21 = v9 THEN v10 WHEN c21 IS NULL THEN v11 WHEN c21 = v12 THEN v11 ELSE v11 END AS c3 FROM t12 a1 LEFT JOIN t13 a2 ON a1.c20 = a2.c20 ) SELECT t1.c1, t4.c2, t5.c3, count(DISTINCT t1.c4), sum(t2.c6) AS c6, sum(t2.c8) / 100, sum(t2.c10) / 100, sum(t2.c10) / 900 FROM t1 INNER JOIN t2 ON t1.c4 = t2.c15 AND t1.c1 = t2.c1 LEFT JOIN t4 ON t1.c4 = t4.c4 LEFT JOIN t5 ON t1.c4 = t5.c15 WHERE t4.c2 IN (v13, v14, v15, v16, v17) GROUP BY t1.c1, t4.c2, t5.c3;
WITH filtered_data AS ( SELECT c1, from_unixtime(c2, 'yyyyMMddHHmmss') AS c2, substr(c3, 0, 8) AS c3, c4 FROM t1 WHERE c3 >= v1 AND c3 <= v2 AND c5 = v3 AND c6 = v4 AND c7 = 0 AND c4 != '' AND c1 != '' ) SELECT c1, c2, c3, c4 FROM filtered_data WHERE c1 IN ( v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23 ) GROUP BY c1, c2, c3
WITH temp_table AS ( SELECT c2, c3, c5 FROM t1 WHERE c5 IN (v1, v7) AND c6 IN (v2, v3, v4, v5) AND c7 = v6 ), bill_df AS ( SELECT c2, c3, c5 FROM t1 WHERE c5 IN (v1, v7) AND c7 = v6 ) SELECT v1, temp_table_now.c2, (NVL(temp_table_now.c3, 0) - NVL(temp_table_before.c3, 0)), (NVL(temp_table1.c3, 0) - NVL(bill_df_before.c3, 0)) FROM (SELECT c2, c3 FROM temp_table WHERE c5 = v1) temp_table_now LEFT JOIN (SELECT c2, c3 FROM temp_table WHERE c5 = v7) temp_table_before ON temp_table_now.c2 = temp_table_before.c2 LEFT JOIN (SELECT c2, c3 FROM bill_df WHERE c5 = v1) temp_table1 ON temp_table_now.c2 = temp_table1.c2 LEFT JOIN (SELECT c2, c3 FROM bill_df WHERE c5 = v7) bill_df_before ON temp_table_now.c2 = bill_df_before.c2 WHERE (NVL(temp_table_now.c3, 0) - NVL(temp_table_before.c3, 0)) > 0 OR (NVL(temp_table1.c3, 0) - NVL(bill_df_before.c3, 0)) > 0;
WITH base_data AS ( SELECT SUBSTR(c1, 1, 8) AS c1, c2 c3, c4, c5, c6 FROM t1 WHERE CAST(c1 AS INT) BETWEEN v3 AND v4 AND c2 IN (v5, v6) AND c7 = v7 ) SELECT bd.c1, bd.app_version, COUNT(DISTINCT CASE WHEN bd.c4 = v1 AND bd.c5 = v2 THEN bd.c3 END), COUNT(DISTINCT CASE WHEN bd.c4 = v8 AND bd.c5 = v2 AND bd.c6 = v9 THEN bd.c3 END), COUNT(DISTINCT CASE WHEN bd.c4 = v8 AND bd.c5 = v2 AND bd.c6 = v10 THEN bd.c3 END) FROM base_data bd GROUP BY bd.c1, bd.c2;
WITH temp_table1 AS ( SELECT cast(c1 / 100 AS int) AS c1, count(*) AS c2, count(DISTINCT c4) AS c3, count(DISTINCT c5) AS c4 FROM t1 WHERE c1 >= v1 AND c1 <= v2 AND c3 = v3 GROUP BY cast(c1 / 100 AS int) ), temp_table2 AS ( SELECT c1, count(*) AS c5, count(DISTINCT c6) AS c6, count(DISTINCT c7) AS c7 FROM t2 WHERE c1 >= v4 AND c1 <= v5 GROUP BY c1 ) SELECT a.c1, a.c2, a.c3, a.c4, d.c5, d.c6, d.c7 FROM temp_table1 a JOIN temp_table2 d ON d.c1 = a.c1;
WITH temp_table1 AS ( SELECT c1, c2, c3, c4, c5, c6, c7, c8 FROM t1 WHERE c9 = v1 AND c10 = v2 AND c11 = v3 ), temp_table2 AS ( SELECT c12, c13, c14, c1, c15, c16, c11, c17, c3, c18, c19, c10, c20, c21, c22, c7, c8, c23 FROM ( SELECT c12, c13, c14, c1, c15, c16, c11, c17, c3, c18, c19, c10, c20, c21, c22, c7, c8, c23, ROW_NUMBER() OVER (PARTITION BY c16, c20 ORDER BY c12 DESC, c22 DESC) AS c30 FROM t3 WHERE c9 = v1 ) subquery WHERE c30 = 1 ) SELECT count(*) FROM temp_table1 LEFT OUTER JOIN temp_table2 ON ( temp_table1.c2 = temp_table2.c16 AND temp_table1.c6 = temp_table2.c20 AND temp_table1.c1 = temp_table2.c1 AND temp_table1.c7 = temp_table2.c7 AND temp_table1.c8 = temp_table2.c8 ) WHERE temp_table2.c16 IS NULL;
WITH combined_data AS ( SELECT c5 AS c3, c4 FROM t1 WHERE c6 BETWEEN v1 AND v2 AND c7 = v3 UNION ALL SELECT c8 AS c3, c9 AS c4 FROM t2 WHERE c6 BETWEEN v1 AND v2 AND c10 IN (v4) ) SELECT c1, COUNT(*) AS c2 FROM ( SELECT CASE WHEN COUNT(DISTINCT c3) BETWEEN 1 AND 5 THEN '1-5' WHEN COUNT(DISTINCT c3) BETWEEN 6 AND 9 THEN '6-9' WHEN COUNT(DISTINCT c3) BETWEEN 10 AND 19 THEN '10-19' WHEN COUNT(DISTINCT c3) BETWEEN 20 AND 29 THEN '20-29' WHEN COUNT(DISTINCT c3) BETWEEN 30 AND 39 THEN '30-39' WHEN COUNT(DISTINCT c3) BETWEEN 40 AND 49 THEN '40-49' WHEN COUNT(DISTINCT c3) BETWEEN 50 AND 59 THEN '50-59' WHEN COUNT(DISTINCT c3) BETWEEN 60 AND 69 THEN '60-69' WHEN COUNT(DISTINCT c3) BETWEEN 70 AND 79 THEN '70-79' WHEN COUNT(DISTINCT c3) BETWEEN 80 AND 89 THEN '80-89' WHEN COUNT(DISTINCT c3) BETWEEN 90 AND 99 THEN '90-99' ELSE '100+' END AS c1, c4 FROM combined_data GROUP BY c4 ) AS user_data GROUP BY c1
WITH temp_table3 AS ( SELECT c1 FROM t5 UNION SELECT c1 FROM t6 UNION SELECT c1 FROM t7 ) SELECT COUNT(DISTINCT temp_table1.c1) FROM ( SELECT DISTINCT c1, c3, c4, IF (unix_timestamp(c5) >= unix_timestamp(v1) AND unix_timestamp(c5) < unix_timestamp(v2), v5, 0) AS c6, c7, (c8 + c9) AS c10 FROM t3 WHERE ds = v3 ORDER BY rand(1) DESC ) temp_table1 LEFT JOIN ( SELECT DISTINCT c1 FROM t4 WHERE ds = v3 AND c11 = v4 AND c12 = v5 ) temp_table2 ON temp_table1.c1 = temp_table2.c1 LEFT JOIN temp_table3 ON temp_table1.c1 = temp_table3.c1 WHERE temp_table1.c10 > 0 AND temp_table1.c6 = 0 AND temp_table1.c3 = v5 AND temp_table1.c4 = 0 AND temp_table2.c1 IS NULL AND temp_table3.c1 IS NULL
WITH temp_table1 AS ( SELECT ds, c1, c9, c10, c11, c4, c3, CASE WHEN c2 IS NULL OR c2 = '' THEN '' ELSE CAST(sm4_GCMDecryptNoPadding(hive_unbase64(substr(c2, 68)), `BINARY`(k1.c12), hive_unbase64(substr(c2, 26, 16)), 12, hive_unbase64(substr(c2, 1, 24)), hive_unbase64(substr(c2, 43, 24))) AS STRING) END AS c2, c5 FROM t1 LEFT JOIN (SELECT c12 FROM t2 LIMIT 1) k1 ON 1 = 1 ) SELECT t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c3, t2.c7, t2.c8 FROM temp_table1 t1 LEFT JOIN t2 ON t1.c1 = t2.c1 WHERE t1.c9 IN (v1, v2) AND t1.c2 = v3 AND t1.c11 = 504
SELECT c1, c2, c3, c4, c5, c6, c7, c8, c9, CASE WHEN instr(NVL(c10, v4), v4) = v5 THEN c10 ELSE v7 END AS c10, v1 FROM t1 WHERE c11 = v1 AND c2 = v6 AND ( (c9 = v2 AND ((c12 < v2 AND from_unixtime(unix_timestamp(substr(c8, 0, 10), 'yyyy-MM-dd'), 'yyyyMMdd') < v1) OR c12 = v3) AND instr(NVL(c10, v4), v4) = v5) OR (from_unixtime(unix_timestamp(substr(c8, 0, 10), 'yyyy-MM-dd'), 'yyyyMMdd') <= v1 AND (c13 != v8 OR c14 != v8) AND instr(NVL(c10, v4), v4) != v5) )
WITH combined_data AS ( SELECT c1, from_unixtime(c2, 'yyyyMMddHHmmss') AS c2, substr(c3, 0, 8) AS c3, c4, c8 FROM t1 WHERE c3 >= v1 AND c3 <= v2 AND c5 = v3 AND c6 = v4 AND c7 = 0 AND c4 != '' AND c8 != '' ) SELECT c1, c2, c3, c8 FROM combined_data WHERE c8 IN (v5, v6, v7, v8, v9, v10, v11, v12, v13, v14) GROUP BY c1, c2, c3, c8
WITH base_data AS ( SELECT CAST(c1 AS BIGINT) AS c1, CAST(c2 AS BIGINT) AS c2, CAST(c3 AS BIGINT) AS c3, c4, c5, CAST(c6 AS BIGINT) AS c6, CAST(c7 AS BIGINT) AS c7, c8, c9, c10, CAST(c11 AS BIGINT) AS c11, CAST(c12 AS BIGINT) AS c12, c13, CASE WHEN array_contains(split(c17, ';'), v1) THEN unbase64(c14) ELSE c14 END AS c14, CAST(c15 AS BIGINT) AS c15, CAST(c15 AS BIGINT) AS c15 FROM t1 WHERE c18 = v2 ), ranked_data AS ( SELECT c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16 FROM base_data ) SELECT SUM(c15) AS total_c15 FROM ranked_data WHERE c16 = 1 AND c12 = 2 AND c9 = v3 AND c10 = v4;
WITH d1 AS ( SELECT c4, c5 FROM ( SELECT c4, c5, row_number() OVER (PARTITION BY c4 ORDER BY c6 DESC, c7 DESC) AS num FROM t2 WHERE c2 <= v1 AND c2 >= v2 AND from_unixtime(CAST(c9 AS BIGINT), 'yyyyMMdd') <= v1 AND from_unixtime(CAST(c9 AS BIGINT), 'yyyyMMdd') >= v2 ) WHERE num = 1 ), d2 AS ( SELECT c2, c11 FROM t3 WHERE c2 = v1 ) SELECT count(DISTINCT uin_1) AS uin_num FROM ( SELECT A.c1 AS uin_1, B.c2 AS uin_2 FROM ( SELECT c1 FROM t1 WHERE c2 <= v1 AND c2 >= v2 AND c3 = v3 AND c4 = v4 AND c5 = v5 AND c6 = v6 ) A INNER JOIN ( SELECT DISTINCT d2.c2 FROM d1 INNER JOIN d2 ON d1.c5 = d2.c11 WHERE d2.c2 IS NOT NULL ) B ON A.c1 = B.c2 ) S
WITH temp_table1 AS ( SELECT regexp_extract(c3, 'str0', 2) AS c1, regexp_extract(c3, 'str0', 3) AS c2 FROM t1 WHERE v1 <= c4 AND c4 <= v2 GROUP BY regexp_extract(c3, 'str0', 2), regexp_extract(c3, 'str0', 3) ), temp_table2 AS ( SELECT NVL(get_json_object(c6, 'str1'), '') AS c2, NVL(c7, 0) AS c1, COUNT(1) AS c5 FROM t2 WHERE v1 <= c8 AND c8 <= v2 AND c9 = v3 AND c10 = v4 AND c11 = v5 AND c12 = v6 GROUP BY NVL(get_json_object(c6, ‘str1), ''), NVL(c7, 0) ) SELECT COUNT(temp_table1.c1) AS u1, COUNT(temp_table2.c1) AS u2 FROM temp_table1 LEFT JOIN temp_table2 ON temp_table1.c1 = temp_table2.c1 AND temp_table1.c2 = temp_table2.c2;
WITH temp_table1 AS ( SELECT c1, c4 FROM t1 WHERE c6 IN (v1, v2) AND c1 = v3 ), temp_table2 AS ( SELECT c4, c2 FROM t2 WHERE c2 IN (v12, v13, v14, v15, v16) ), temp_table3 AS ( SELECT t3.c7, CASE WHEN t4.c9 = v4 THEN v5 WHEN t4.c9 = v6 THEN v7 WHEN t4.c9 = v8 THEN v9 WHEN t4.c9 IS NULL THEN v10 WHEN t4.c9 = v11 THEN v10 ELSE v10 END AS c3 FROM t3 LEFT JOIN t4 ON t3.c8 = t4.c8 ) SELECT t1.c1, t2.c2, t3.c3, COUNT(DISTINCT t1.c4) FROM temp_table1 t1 LEFT JOIN temp_table2 t2 ON t1.c4 = t2.c4 LEFT JOIN temp_table3 t3 ON t1.c4 = t3.c7 GROUP BY t1.c1, t2.c2, t3.c3;
WITH base_data AS ( SELECT nvl(c1, 'v1') AS c1, nvl(c2, 'v1') AS c2, NVL(c3, 'v1') AS c3, c6, c5 FROM t1 WHERE c7 = v2 AND c3 IN ('v3', 'v4', 'v5', 'v6') ) SELECT a.c1, a.c2, a.c3, a.c4, b.c5 FROM (SELECT c1, c2, c3, count(DISTINCT c6) AS c4 FROM base_data GROUP BY c1, c2, c3 WITH CUBE) a LEFT JOIN (SELECT c3, c5 FROM base_data GROUP BY c3, c5) b ON a.c3 = b.c3;
WITH base_query AS ( SELECT a.c1, a.c2, a.c3, a.c4, a.c5, a.c6 FROM t1 a WHERE a.c7 != v1 AND a.c8 = v2 AND a.c9 = v3 ), distinct_counts AS ( SELECT c1, COUNT(DISTINCT c2) AS c22, SUM(c3) AS c33, COUNT(DISTINCT c4, c5) AS c44, COUNT(DISTINCT c6) AS c55 FROM base_query GROUP BY c1 ), total_counts AS ( SELECT 0 AS c1, COUNT(DISTINCT c2) AS c22, SUM(c3) AS c33, COUNT(DISTINCT c4, c5) AS c44, COUNT(DISTINCT c6) AS c55 FROM base_query ) SELECT * FROM distinct_counts UNION ALL SELECT * FROM total_counts;
WITH temp_table1 AS ( SELECT c1, COUNT(1) AS c2 FROM ( SELECT NVL(get_json_object(c6, v2), v3) AS c1 FROM t3 WHERE c7 BETWEEN v4 AND v5 AND c8 = v6 AND c9 = v7 AND c10 = v8 AND c11 = v9 ) GROUP BY c1 HAVING c1 <> v3 ) SELECT c4, g0, SUM(c2) AS c2 FROM ( SELECT c1, c1, c3, c4, IF(t2.c1 IS NULL, 0, 1) AS g0, temp_table1.c2 FROM ( SELECT c1, c2, c3, c4 FROM t1 WHERE c5 = v1 ) temp_table2 LEFT JOIN t2 ON temp_table2.c2 = t2.c1 LEFT JOIN temp_table1 ON temp_table2.c1 = temp_table1.c1 ) GROUP BY c4, g0
WITH pre_aggregated AS ( SELECT t1.c1, t1.c2, t1.c3, CASE WHEN t1.c4 = v1 THEN v1 ELSE v2 END AS open_c1, CASE WHEN t1.c6 = v1 THEN v1 ELSE v2 END AS open_c2, CASE WHEN t1.c6 = v3 THEN v1 ELSE v2 END AS open_c3, CASE WHEN t1.c4 = v1 THEN t1.c9 ELSE NULL END AS open_c4, CASE WHEN t1.c6 = v1 THEN t1.c9 ELSE NULL END AS open_c5, CASE WHEN t1.c6 = v3 THEN t1.c9 ELSE NULL END AS open_c6 FROM t1 ) SELECT c1, c2, c3, nvl(SUM(open_c1), 0), nvl(SUM(open_c2), 0) nvl(SUM(open_c3), 0), nvl(COUNT(DISTINCT open_c3), 0), nvl(COUNT(DISTINCT open_c4), 0), nvl(COUNT(DISTINCT open_c5), 0) FROM pre_aggregated GROUP BY c1, c2, c3;
WITH combined_data AS ( SELECT c1, c5 AS c6, c3, c7, c12 FROM t1 WHERE c1 >= v2 AND c1 <= v3 AND c8 LIKE v4 AND c9 != v5 AND c10 = v6 AND c11 = v7 ) SELECT SUBSTR(t1.c1, 1, 8) AS c1_alia, t1.c3, COUNT(*) AS c2_alias FROM (SELECT c1, c6, c3 FROM combined_data WHERE c7 = v1) t1 JOIN (SELECT c6 FROM combined_data WHERE c7 = v8 AND c12 = v9) t2 ON t1.c6 = t2.c6 GROUP BY SUBSTR(t1.c1, 1, 8), t1.c3
WITH temp_table AS ( SELECT c4 AS c1, c2, c7, c8, ROW_NUMBER() OVER (PARTITION BY c1, c7 ORDER BY c2) AS c5 FROM t1 WHERE c6 = v1 AND (c7 = v2 OR (c7 = v3 AND c8 = v4)) ) SELECT AVG(c3) FROM ( SELECT t1.c1, (t2.c2 - t1.c2) AS c3 FROM (SELECT c1, c2 FROM temp_table WHERE c7 = v2 AND c5 = 1) t1 JOIN (SELECT c1, c2 FROM temp_table WHERE c7 = v3 AND c8 = v4 AND c5 = 1) t2 ON t1.c1 = t2.c1 AND t2.c2 > t1.c2 ) subquery WHERE c3 > v5 AND c3 < v6;
WITH base_data AS ( SELECT nvl(c1, 'v1') AS c1, nvl(c2, 'v1') AS c2, NVL(c3, 'v1') AS c3, c6, c5 FROM t1 WHERE c7 = v2 AND c3 IN ('v3', 'v4') ) SELECT a.c1, a.c2, a.c3, a.c4, b.c5 FROM (SELECT c1, c2, c3, count(DISTINCT c6) AS c4 FROM base_data GROUP BY c1, c2, c3 WITH CUBE) a LEFT JOIN (SELECT c3, c5 FROM base_data GROUP BY c3, c5) b ON a.c3 = b.c3;
WITH temp_table AS ( SELECT SUBSTR(a0.c1, 1, 6) AS d, COUNT(DISTINCT a0.c3) AS c15, COUNT(DISTINCT a0.c5) AS c16, SUM(a0.c7) / 100 AS c17 FROM t1 a0 WHERE a0.c1 >= v2 AND a0.c1 <= v1 GROUP BY SUBSTR(a0.c1, 1, 6) ), temp_table1 AS ( SELECT SUBSTR(a0.c1, 1, 6) AS d, COUNT( DISTINCT IF(a1.c9 = SUBSTR(a0.c1, 1, 6), a0.c3, NULL) ) AS c18 FROM t1 a0 LEFT JOIN ( SELECT c1, c3, SUBSTR(c11, 1, 6) AS c9, SUBSTR(c12, 1, 6) AS c13 FROM t2 WHERE c1 = v3 ) a1 ON a0.c3 = a1.c3 WHERE a0.c1 >= v2 AND a0.c1 <= v1 GROUP BY SUBSTR(a0.c1, 1, 6) ) SELECT ma.d, ma.c15, ma.c16, ma.c17, flc.c18 FROM temp_table ma JOIN temp_table1 flc ON ma.d = flc.d ORDER BY ma.d;
WITH temp_table1 AS ( SELECT c1_alias, CAST(get_json_object(unbase64(c3), '$.c2') AS DOUBLE) AS c2 FROM t3 WHERE c5 >= v1 AND c5 <= v2 AND c6 = v3 AND c7 = v4 ), temp_table2 AS ( SELECT t21.c1, t22.c2 FROM t21 JOIN temp_table1 AS t22 ON t21.c1 = t22.c1_alias WHERE c5 = v5 AND c8 = v6 AND t22.c2 < v7 ) SELECT count(DISTINCT t2.c1) FROM t1 t1 RIGHT JOIN temp_table2 t2 ON t1.c1 = t2.c1 WHERE t1.c9 = v5 AND t1.c2 >= v7;
WITH temp_table1 AS ( SELECT c1, c2, c3, c4, c5, c6, c7, c8, c9, c10 FROM t1 WHERE c11 = 'v1' ), temp_table2 AS ( SELECT DISTINCT c12 AS c13 FROM t2 WHERE c11 = 'v2' AND c14 = v3 AND c15 = v4 ), temp_table3 AS ( SELECT c16 FROM t3 WHERE c11 = 'v2' ) SELECT count(1) FROM temp_table1 LEFT JOIN temp_table2 ON temp_table1.c1 = temp_table2.c13 LEFT JOIN temp_table3 ON temp_table1.c1 = temp_table3.c16 WHERE temp_table2.c13 IS NULL;
SELECT c5 AS c1, c2, c3, COUNT(*) AS c4 FROM ( SELECT c5 AS c1, c2, c3, COUNT(*) OVER (PARTITION BY c5) AS c6 FROM t2 WHERE c7 = v1 AND c8 BETWEEN v2 AND v3 AND c9 LIKE v4 AND c10 != v5 AND c11 = v6 AND c12 = v7 AND c13 = v8 AND c2 = v9 ) subquery WHERE c6 > v10 GROUP BY c1, c2, c3 ORDER BY c1;
SELECT t1.c1, t1.c2, t1.c3, t1.c4, t2.c5, t2.c6 FROM t1 LEFT JOIN (SELECT c7, c8, COUNT(1) AS c5, SUM(c9) AS c6 FROM t2 WHERE c10 BETWEEN v1 AND v2 GROUP BY c7, c8) t2 ON t1.c1 = t2.c7 AND t1.c3 = t2.c8 WHERE t1.c4 = v3
SELECT count(DISTINCT c11) AS c10 FROM (SELECT A.c1 AS c11, B.c2 AS c12 FROM (SELECT c1 FROM t1 WHERE c2 <= v1 AND c2 >= v2 AND c3 = v3 AND c4 = v4 AND c5 = v5 AND c6 = v6) A INNER JOIN (SELECT DISTINCT c2 FROM t3 WHERE c2 = v7 AND c3 = v8) B ON A.c1 = B.c2)
WITH base_data AS ( SELECT c3, NVL(c1, 0) AS c1, COUNT(c5) AS cnt FROM t1 WHERE c6 = v1 GROUP BY c3, c1 ) SELECT temp_table1.c1, temp_table1.c3, temp_table1.c4, temp_table2.c2 FROM ( SELECT c1, c3, SUM(cnt) AS c4 FROM base_data GROUP BY c3, c1 ) temp_table1 JOIN ( SELECT c1, SUM(cnt) AS c2 FROM base_data GROUP BY c1 ) temp_table2 ON temp_table1.c1 = temp_table2.c1;
WITH temp_table1 AS ( SELECT c1, c6 AS c2, c7 AS c3, c8 AS c4, c9 AS c5, ROW_NUMBER() OVER (PARTITION BY c6 ORDER BY c10 DESC, c8 DESC) AS c11 FROM t2 WHERE c1 >= v1 AND c6 IN (v2, v3) ) SELECT c1, c2, c3, c4, c5 FROM temp_table1 WHERE c11 = 1;
WITH temp_table1 AS ( SELECT DISTINCT c1 FROM t1 WHERE c3 = v3 AND c4 > 0 ), temp_table2 AS ( SELECT DISTINCT c1, c2 FROM t2 WHERE c2 IN (v1, v2) AND c3 = v3 ) SELECT CASE WHEN c2 = v1 THEN 1 WHEN c2 = v2 THEN 2 ELSE 0 END AS c2, COUNT(temp_table1.c1) AS c4 FROM temp_table1 JOIN temp_table2 ON temp_table1.c1 = temp_table2.c1 GROUP BY ROLLUP(c2)
WITH pre_aggregated_data AS ( SELECT temp_table1.c1, CASE WHEN temp_table1.c4 > 1000000 THEN 1 ELSE 0 END AS is_more_10000, CASE WHEN temp_table1.c4 < 1000000 THEN 1 ELSE 0 END AS is_less_10000 FROM ( SELECT c1, c2, c3, c4 FROM t1 WHERE c7 = v1 AND c8 IN (v2, v3) AND c2 > 0 ) temp_table1 JOIN ( SELECT DISTINCT c1 FROM t2 WHERE c9 = v4 AND c7 = v1 ) temp_table2 ON temp_table1.c1 = temp_table2.c1 ) SELECT SUM(is_more_10000) AS more_10000, SUM(is_less_10000) AS less_10000 FROM pre_aggregated_data;
WITH combined_data AS ( SELECT * FROM t1 WHERE c5 > v1 UNION ALL SELECT * FROM t2 WHERE c5 > v1 ) SELECT AVG(c1) FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY c2 ORDER BY c3 DESC) AS c4 FROM combined_data ) b WHERE c4 = 1 AND c6 IN (v2, v3, v4) AND c7 = v5;
WITH combined_data AS ( SELECT c1, c2, c3, c4, c5, c6, 'NEW' AS source FROM t1 WHERE c7 = v1 AND c8 = v2 UNION ALL SELECT c1, c2, c3, c4, c5, c6, 'OLD' AS source FROM t2 WHERE c7 = v1 AND c8 = v2 ) SELECT c1, c2, c3, c4, MAX(CASE WHEN source = 'NEW' THEN c5 END) AS nc1, MAX(CASE WHEN source = 'OLD' THEN c5 END) AS nc2, MAX(CASE WHEN source = 'NEW' THEN c6 END) AS nc3, MAX(CASE WHEN source = 'OLD' THEN c6 END) AS nc4 FROM combined_data GROUP BY c1, c2, c3, c4 HAVING MAX(CASE WHEN source = 'NEW' THEN c6 END) IS NULL OR MAX(CASE WHEN source = 'OLD' THEN c6 END) IS NULL OR MAX(CASE WHEN source = 'NEW' THEN c6 END) <> MAX(CASE WHEN source = 'OLD' THEN c6 END);
SELECT COUNT(*) FROM ( SELECT concat(v1, substr(c1, -4, 3), v2, substr(c1, -1, 1)) AS c2, c1 FROM t1 WHERE c3 = v3 AND c4 IN (v4, v5) ) temp_table1 INNER JOIN ( SELECT c1 FROM t1 WHERE c3 = v3 AND c1 NOT IN (v6, v7) ) temp_table2 ON temp_table1.c1 = temp_table2.c1
SELECT 0 AS c1, t1.c2, t2.c3, t3.c4, t4.c5, t1.c6 FROM (SELECT t2.c12, COUNT(DISTINCT t2.c7) AS c2 FROM t2 WHERE t2.c13 = v1 AND t2.c14 = v2 GROUP BY t2.c12) t1 JOIN (SELECT t2.c12, SUM(t2.c8) AS c3 FROM t2 WHERE t2.c13 = v1 AND t2.c14 = v2 GROUP BY t2.c12) t2 ON t1.c12 = t2.c12 JOIN (SELECT t2.c12, COUNT(DISTINCT t2.c9, t2.c10) AS c4 FROM t2 WHERE t2.c13 = v1 AND t2.c14 = v2 GROUP BY t2.c12) t3 ON t1.c12 = t3.c12 JOIN (SELECT t2.c12, COUNT(DISTINCT t2.c11) AS c5 FROM t2 WHERE t2.c13 = v1 AND t2.c14 = v2 GROUP BY t2.c12) t4 ON t1.c12 = t4.c12;
WITH combined_data AS ( SELECT *, row_number() over(PARTITION BY c2 ORDER BY c3 DESC) AS id FROM ( SELECT * FROM t1 WHERE c5 > v1 AND c6 = v2 UNION ALL SELECT * FROM t2 WHERE c5 > v1 AND c6 = v2 ) a ) SELECT avg(c1) FROM combined_data WHERE id = 1;
WITH temp_table1 AS ( SELECT DISTINCT c1, c2 FROM t1 WHERE c2 != 0 AND c1 != 0 AND c3 = 0 AND c4 <= v2 ), temp_table2 AS ( SELECT c5, c6 FROM t2 WHERE c6 != 0 AND c5 = v3 AND c7 IN (v4) ) SELECT COUNT(DISTINCT t1.c1) FROM temp_table1 t1 LEFT JOIN temp_table2 t2 ON t1.c2 = t2.c6;
WITH temp_table1 AS ( SELECT c1, SUM(c2) / 100 AS c3, COUNT(c3) AS c4 FROM t1 WHERE c4 >= v1 AND c4 <= v2 AND c5 = v3 GROUP BY c1 ), temp_table2 AS ( SELECT c6, c7 FROM t2 ) SELECT t1.c1, t2.c7, t1.c3, t1.c4 FROM temp_table1 t1 LEFT JOIN temp_table2 t2 ON t1.c1 = t2.c6 ORDER BY t1.c3 DESC;
SELECT c2, count(1) FROM (SELECT c3, c2, c4, c5, c6, c7, ROW_NUMBER() OVER (PARTITION BY c3 ORDER BY c8 DESC) AS c9 FROM t1 WHERE c10 >= v1 AND c10 <= v2 AND c4 = 1) subquery WHERE c9 = 1 GROUP BY c2 ORDER BY c2
WITH t1 AS ( SELECT c1 FROM t1 WHERE c2 = v1 ) SELECT t2.c2 FROM t1 LEFT t2 ON t1.c1 = t2.c2 AND t2.c7 > v2 AND t2.c6 = v3 AND t2.c4 = v4 WHERE t2.c2 IS NULL
WITH t1 AS ( SELECT c1 FROM t1 WHERE c2 = v1 ), t2 AS ( SELECT c3, c4, c5, c6, c7 FROM t2 WHERE c8 > v2 AND c7 = v3 AND c5 = v4 ) SELECT t1.c1 FROM t1 WHERE NOT EXISTS ( SELECT 1 FROM t2 WHERE t1.c1 = t2.c4 );
WITH temp_table1 AS ( SELECT DISTINCT c1, c2, c3, c4, c5, c6 FROM t3 WHERE c5 = v1 AND c4 = v2 AND c2 = v3 AND c3 = v4 ) SELECT SUM(c6) AS c7 FROM temp_table1;
